diff --git a/jmjrst-testrun/jmjrst/jmjrst.main/pom.xml b/jmjrst-testrun/jmjrst/jmjrst.main/pom.xml
index b536f9c..c6771ab 100644
--- a/jmjrst-testrun/jmjrst/jmjrst.main/pom.xml
+++ b/jmjrst-testrun/jmjrst/jmjrst.main/pom.xml
@@ -1,32 +1,25 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-	<parent>
-		<groupId>swt1</groupId>
-		<artifactId>jmjrst</artifactId>
-		<version>0.0.1-SNAPSHOT</version>
-	</parent>
-	<artifactId>jmjrst.main</artifactId>
-	<dependencies>
-		<dependency>
-			<groupId>junit</groupId>
-			<artifactId>junit</artifactId>
-		</dependency>
-	</dependencies>
-	<build>
-		<plugins>
-			<plugin>
-				<groupId>org.apache.maven.plugins</groupId>
-				<artifactId>maven-jar-plugin</artifactId>
-				<configuration>
-					<archive>
-						<manifest>
-							<addClasspath>true</addClasspath>
-							<mainClass>org.jis.Main</mainClass>
-						</manifest>
-					</archive>
-				</configuration>
-			</plugin>
-		</plugins>
-	</build>
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <groupId>swt1</groupId>
+    <artifactId>jmjrst</artifactId>
+    <version>0.0.1-SNAPSHOT</version>
+  </parent>
+  <artifactId>jmjrst.main</artifactId>
+  <build>
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-jar-plugin</artifactId>
+        <configuration>
+          <archive>
+            <manifest>
+              <addClasspath>true</addClasspath>
+              <mainClass>org.jis.Main</mainClass>
+            </manifest>
+          </archive>
+        </configuration>
+      </plugin>
+    </plugins>
+  </build>
 </project>
\ No newline at end of file
diff --git a/jmjrst-testrun/jmjrst/jmjrst.main/src/main/java/org/jis/generator/Generator.java b/jmjrst-testrun/jmjrst/jmjrst.main/src/main/java/org/jis/generator/Generator.java
index d78d4b4..ba1bf82 100644
--- a/jmjrst-testrun/jmjrst/jmjrst.main/src/main/java/org/jis/generator/Generator.java
+++ b/jmjrst-testrun/jmjrst/jmjrst.main/src/main/java/org/jis/generator/Generator.java
@@ -719,13 +719,8 @@ public class Generator {
 
   public BufferedImage rotateImage(BufferedImage image, double rotate)
   {
-
     if (rotate == 0) return image;
 
-	if(image == null) {
-		throw new IllegalArgumentException("Can't rotate null image");
-	}
-	
     AffineTransform transform = new AffineTransform();
 
     // get width and height of the origianl image
diff --git a/jmjrst-testrun/jmjrst/jmjrst.main/src/test/java/org/jis/generator/GeneratorTest.java b/jmjrst-testrun/jmjrst/jmjrst.main/src/test/java/org/jis/generator/GeneratorTest.java
deleted file mode 100644
index 6dd4816..0000000
--- a/jmjrst-testrun/jmjrst/jmjrst.main/src/test/java/org/jis/generator/GeneratorTest.java
+++ /dev/null
@@ -1,235 +0,0 @@
-package org.jis.generator;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
-import java.awt.image.BufferedImage;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.text.SimpleDateFormat;
-import java.util.Date;
-import java.util.Locale;
-
-import javax.imageio.IIOImage;
-import javax.imageio.ImageIO;
-import javax.imageio.ImageReadParam;
-import javax.imageio.ImageReader;
-import javax.imageio.ImageWriteParam;
-import javax.imageio.ImageWriter;
-import javax.imageio.metadata.IIOMetadata;
-import javax.imageio.plugins.jpeg.JPEGImageWriteParam;
-import javax.imageio.stream.ImageInputStream;
-import javax.imageio.stream.ImageOutputStream;
-
-import org.junit.After;
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-
-/**
- * Sommersemester 2015 - Ãœbungsblatt 1 - Aufgabe 2
- */
-public class GeneratorTest {
-	/**
-	 * Class under test.
-	 */
-	private Generator generator;
-
-
-	private static final int IMAGE_HEIGHT = 128;
-	private static final int IMAGE_WIDTH = 256;
-	private static final File TEST_DIR = new File("target/testData");
-	private static final File IMAGE_FILE = new File("src/test/resources/picture.jpg");
-
-	/**
-	 * Input for test cases
-	 */
-	private static BufferedImage testImage;
-	/**
-	 * Metadata for saving the image
-	 */
-	private IIOMetadata imeta;
-	/**
-	 * output from test cases
-	 */
-	private BufferedImage rotatedImageTestResult;
-
-	/**
-	 * Aufgabe 2 h) Teil 1: Sicherstellen, dass das Ausgabeverzeichnis existiert
-	 * und leer ist.
-	 */
-	@BeforeClass
-	public static void beforeClass() {
-		if (TEST_DIR.exists()) {
-			for (File f : TEST_DIR.listFiles()) {
-				f.delete();
-			}
-		} else {
-			TEST_DIR.mkdirs();
-		}
-	}
-
-	@Before
-	/**
-	 * Aufgabe 2 c)
-	 * @throws Exception
-	 */
-	public void setUp() throws Exception {
-		generator = new Generator(null, 0);
-
-		testImage = null;
-		imeta = null;
-		rotatedImageTestResult = null;
-
-		try (ImageInputStream iis = ImageIO.createImageInputStream(IMAGE_FILE);) {
-			ImageReader reader = ImageIO.getImageReadersByFormatName("jpg").next();
-			reader.setInput(iis, true);
-			ImageReadParam params = reader.getDefaultReadParam();
-			testImage = reader.read(0, params);
-			imeta = reader.getImageMetadata(0);
-			reader.dispose();
-		} catch (IOException e) {
-			fail(e.getMessage());
-		}
-	}
-
-	/**
-	 * Aufgabe 2 h) Teil 2: Automatisches Speichern von testImage.
-	 */
-	@After
-	public void tearDown() {
-		SimpleDateFormat sdf = new SimpleDateFormat("HHmmss_SSS");
-		String time = sdf.format(new Date());
-
-		File outputFile = new File("target/testData/rotatedPicture_" + time + ".jpg");
-
-		if (rotatedImageTestResult != null) {
-			try (FileOutputStream fos = new FileOutputStream(outputFile);
-					ImageOutputStream ios = ImageIO.createImageOutputStream(fos);) {
-				ImageWriter writer = ImageIO.getImageWritersByFormatName("jpg").next();
-				writer.setOutput(ios);
-
-				ImageWriteParam iwparam = new JPEGImageWriteParam(Locale.getDefault());
-				iwparam.setCompressionMode(ImageWriteParam.MODE_EXPLICIT); // mode explicit necessary
-
-				// set JPEG Quality
-				iwparam.setCompressionQuality(1f);
-				writer.write(imeta, new IIOImage(rotatedImageTestResult, null, null), iwparam);
-				writer.dispose();
-			} catch (IOException e) {
-				fail();
-			}
-		}
-	}
-
-	/**
-	 * Aufgabe 2 d) Teil 1
-	 */
-	@Test
-	public void testRotateImage_RotateImage0() {
-		rotatedImageTestResult = generator.rotateImage(testImage, 0);
-
-		assertTrue(imageEquals(testImage, rotatedImageTestResult));
-	}
-
-	/**
-	 * Aufgabe 2 d) Teil 2
-	 */
-	@Test
-	public void testRotateImage_RotateNull0() {
-		rotatedImageTestResult = generator.rotateImage(null, 0);
-
-		assertTrue(null == rotatedImageTestResult);
-	}
-
-	/**
-	 * Aufgabe 2 e)
-	 */
-	@Test(expected = IllegalArgumentException.class)
-	public void testRotateImage_Rotate1() {
-		generator.rotateImage(testImage, 1.0);
-	}
-
-	/**
-	 * Aufgabe 2 f)
-	 */
-	@Test(expected = IllegalArgumentException.class)
-	public void testRotateImage_RotateNull1() {
-		rotatedImageTestResult = generator.rotateImage(null,Generator.ROTATE_90);
-	}
-
-	/**
-	 * Aufgabe 2 g)
-	 */
-	@Test
-	public void testRotateImage_Rotate90() {
-		rotatedImageTestResult = generator.rotateImage(testImage,
-				Generator.ROTATE_90);
-
-		assertEquals(testImage.getHeight(), rotatedImageTestResult.getWidth());
-		assertEquals(testImage.getWidth(), rotatedImageTestResult.getHeight());
-
-		for (int i = 0; i < IMAGE_HEIGHT; i++) {
-			for (int j = 0; j < IMAGE_WIDTH; j++) {
-				assertEquals(testImage.getRGB(j, i),
-						rotatedImageTestResult.getRGB(IMAGE_HEIGHT - 1 - i, j));
-			}
-		}
-	}
-
-	/**
-	 * Aufgabe 2 g)
-	 */
-	@Test
-	public void testRotateImage_Rotate270() {
-		rotatedImageTestResult = generator.rotateImage(testImage,
-				Generator.ROTATE_270);
-
-		assertEquals(testImage.getHeight(), rotatedImageTestResult.getWidth());
-		assertEquals(testImage.getWidth(), rotatedImageTestResult.getHeight());
-
-		for (int i = 0; i < IMAGE_HEIGHT; i++) {
-			for (int j = 0; j < IMAGE_WIDTH; j++) {
-				assertEquals(testImage.getRGB(j, i),
-						rotatedImageTestResult.getRGB(i, IMAGE_WIDTH - 1 - j));
-			}
-		}
-	}
-
-	/**
-	 * Check if two images are identical - pixel wise.
-	 * 
-	 * @param expected
-	 *            the expected image
-	 * @param actual
-	 *            the actual image
-	 * @return true if images are equal, false otherwise.
-	 */
-	public static boolean imageEquals(BufferedImage expected,
-			BufferedImage actual) {
-		if (expected == null || actual == null) {
-			return false;
-		}
-
-		if (expected.getHeight() != actual.getHeight()) {
-			return false;
-		}
-
-		if (expected.getWidth() != actual.getWidth()) {
-			return false;
-		}
-
-		for (int i = 0; i < expected.getHeight(); i++) {
-			for (int j = 0; j < expected.getWidth(); j++) {
-				if (expected.getRGB(j, i) != actual.getRGB(j, i)) {
-					return false;
-				}
-			}
-		}
-
-		return true;
-	}
-
-}
diff --git a/jmjrst-testrun/jmjrst/jmjrst.main/src/test/resources/picture.jpg b/jmjrst-testrun/jmjrst/jmjrst.main/src/test/resources/picture.jpg
deleted file mode 100644
index 81ec862..0000000
Binary files a/jmjrst-testrun/jmjrst/jmjrst.main/src/test/resources/picture.jpg and /dev/null differ
